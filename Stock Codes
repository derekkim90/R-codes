---
title: "Predicting Stock Market"
author: "Derek Kim"
date: "February 6, 2019"
output: word_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:


```{r}
library(randomForest)
library(e1071)
library(caret)
library(corrplot)
library(quantmod)
library(TTR)
library(Quandl)
library(pageviews)
library(lubridate)
library(wikipediatrend)
library(gtrendsR)
```

Data Prep
```{r} 
data <- read.csv(file = "D:/Chrome Downloads/Capstone Project/datasets/MSFT.csv")
msft<- data.frame(data)
sum(is.na(msft))

msft$Date<- as.Date(msft$Date)
msft$Volume<-as.numeric(msft$Volume)
str(msft)

#simple moving average is a trend indicator calculated as an average price over a particular period
sma<-SMA(msft$Close, n = 14)
head(sma, n=15)
tail(sma)

#exponential moving average is a type of moving average where weights, ω i , of past prices decrease exponentially:
ema<-EMA(msft$Close, n = 14, wilder = FALSE)
head(ema, n =15)
tail(ema)

#true range, average true range, true high, true low - provides information about the degree of price volatility.
atr <- ATR(msft[,c("High","Low","Close")], n=14) 
head(atr, n =15)
tail(atr)

# Average directional movement index indicates the strength of a trend in price time series. It is a combination of the negative and positive directional movements indicators, DI + n and DI −n , computed over a period of n past days corresponding to the input window length
adx<- ADX(msft[,c("High","Low","Close")], n=14) 
head(adx, n=15)
tail(adx)

#commodity channel index is an oscillator used to deter- mine whether a stock is overbought or oversold. It assesses the relationship between an asset price, its moving average and de- viations from that average
cci <- CCI(msft[,c("High","Low","Close")], n= 14) 
head(cci, n= 20)
tail(cci)

#rate of change shows the relative difference between the closing price on the day of forecast and the closing price n days previously, where n is equal to the input window length
roc<- ROC(msft[,c("Close")], n= 14) 
head(roc, n=17)
tail(roc)

#relative strength index compares the size of recent gains to recent losses, it is intended to reveal the strength or weak- ness of a price trend from a range of closing prices over a time period
price <- msft[,"Close"] 
rsi <- RSI(price, n= 14)
head(rsi, n= 15)
tail(rsi)

#The William’s %R oscillator shows the relationship between the current closing price and the high and low prices over the latest n days equal to the input window length
wpr <- WPR(msft[,c("High","Low","Close")], n = 14) 
head(wpr, n =15)
tail(wpr)

#Stochastic %K is a technical momentum indicator that compares a close price and its price interval during a period of n past days and gives a signal meaning that a stock is oversold or over- bought:
sto<- stoch(msft[,c("High","Low","Close")], nFastK = 14, nFastD = 3, nSlowD = 3) 
head(sto, n = 15)
tail (sto)

mydata <- cbind(sma,ema, atr,adx,cci,roc,rsi,wpr,sto, msft)
mydata

```

```{r}
saveRDS(mydata, file="stock_msft.Rda")
mydata<-readRDS(file="stock_msft.Rda")
tail(mydata)

#Select data for the past 10 years of stock price information
data <-mydata[mydata$Date >= "2009-02-12",]
data
```

```{r}
hist(data$sma, main = "Simple Moving Averages (SMA)")
hist(data$ema, main = "Exponential Moving Average")
hist(data$atr, main = "Average True Range of the Series")
hist(data$tr, main = "True Range of the Series")
hist(data$trueHigh, main = "True High of the Series")
hist(data$trueLow, main = "True Low")
hist(data$DIp, main = "Positive Direction Index")
hist(data$DIn, main = "Negative Direction Index")
hist(data$DX, main = "Direction Index")
hist(data$ADX, main = "Average Direction Index")
hist(data$cci, main = "Commodity Channel Index")
hist(data$roc, main = "Rate of Change")
hist(data$rsi, main = "Relative Strength Index")
hist(data$wpr, main = "William's % R")
hist(data$fastK, main = "Number of periods for fast %K")
hist(data$fastD, main = "Number of periods for fast %D")
hist(data$slowD, main = "Number of periods for slow %D")
hist(data$Open, main = "Stock Open Prices")
hist(data$High, main = "Stock High Prices")
hist(data$Low, main = "Stock Low Prices")
hist(data$Close, main = "Stock Close Prices")
hist(data$Adj.Close, main = "Stock Adj. Close Prices")
hist(data$Volume, main = "Stock Volume")

#Suspected outliers = 1.5*IQR, outliers = 3*IQR

boxplot(data$sma, data$ema, names= c("SMA", "EMA"))

boxplot(data$atr, data$tr, names = c("ATR", "TR"))

boxplot(data$trueHigh, data$trueLow, names= c("True High", "True Low"))

boxplot(data$DIp, data$DIn, names= c("DIp", "DIn"))

boxplot(data$DX, data$ADX, names = c("DX", "ADX"))

boxplot(data$cci, main = ("CCI"))
boxplot(data$roc, main = ("ROC"))
boxplot(data$rsi, main = ("RSI"))
boxplot(data$wpr, data$fastK, data$fastD, data$slowD, names=c("WPR", "fastK", "fastD","slowD"))

boxplot(data$Open, data$High, data$Low, data$Close, data$Adj.Close, names=c("Open", "High", "Low", "Close", "Adj. Close"))

boxplot(data$Volume, main = ("Volume"))


```

```{r}
nodate.data<-data
 
nodate.data$Date<- NULL
nodate.data
str(nodate.data)
m<-cor(nodate.data, method = "pearson")
corrplot(m, method = "number", type = "upper", number.digits = 1, number.cex = 0.55)

```

```{r}

scale(nodate.data, center = TRUE, scale = TRUE)
traindata<- trainControl(method = "cv", number = 5) #5 fold cross validation

#. selects all predictors in data frame
modeldata<- train(Close~., data = nodate.data, trControl = traindata, method = "rf")
print(modeldata)


#Import Library
#require(e1071) #Contains the SVM 
#Train <- read.csv(file.choose())
#Test <- read.csv(file.choose())
# there are various options associated with SVM training; like changing kernel, gamma and C value.

# create model
#model <- svm(Target~Predictor1+Predictor2+Predictor3,data=Train,kernel='linear',gamma=0.2,cost=100)

#Predict Output
#preds <- predict(model,Test)
#table(preds)
```

```{r}
data_adjusted <- data
for (i in 1:dim(data_adjusted)[1]) {
  if (data_adjusted$Close[i] > data_adjusted$Close [i-1]){
    data_adjusted$move [i]<- "UP"
    } else if 
      (data_adjusted$Close[i] < data_adjusted$Close [i-1]){
        data_adjusted$move[i] <- "DOWN"
      } else {
        data_adjusted$move[i] <-"NO MOVE"
      }
}

tail (data_adjusted)
tail(data_adjusted$move)

```

```{r}
if (data$Close[2] > data$Close[1]) {
  print ("MONEY")
} else {
  print ("NO")
}



```

